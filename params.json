{"name":"Node-foundationdblayers","tagline":"Layers for FoundationDb using Node.js","body":"###FoundationDB Layers for Node.js (alpha)\r\n\r\nThis library offers a set of layers to use with the [FoundationDB database](http://www.foundationdb.com/).  FoundationDB\r\nis an interesting, new noSQL variant that combines true ACID transactions across server instances and multiple key/value pairs.\r\nIn order to take full advantage of the FoundationDB paradigm, the developer must create layers that wrap key/value pair transactions.\r\nThe FoundationDB Layers for Node.js library provides basic structures such as **counter** and **array**, as well as more advanced layers:\r\n\r\n- **Queue Layer (FIFO and LIFO)** - implements First-In/First-Out or Last-In/Last-Out queues.\r\n- **Table Layer** - store related data in row/column format used in traditional RDBMS systems.\r\n- **Bloom Filter Layer** - a space-efficient data structure that tests whether an element is a set member. False positives are possible.  False negatives are not possible.\r\n- **Scored Set Layer** - simple data structure that tracks scores for specific ids.  Adding an element to the set increments its score, removing the element decrements the score.\r\n\r\nUpcomming layers include:\r\n\r\n- **Capped List Layer**\r\n- **Graph Layer**\r\n- **TTL Expiration Layer**\r\n- **Column Index Layer**\r\n- **Table Filter Layer**\r\n\r\nPlease note this library is considered alpha.  Although there are functional and unit tests around the layers, no performance tuning has been done and the code is still considered very rough.  Use the layers at your own risk (or help us enhance and provide fixes).\r\n\r\n## Installation\r\n\r\nThe library can be installed from NPM:\r\n\r\n    npm install node-foundationdblayers\r\n\r\nNote that the use of the library requires installation of the FoundationDB client infrastructure.  See the [FDB Node API\r\ndocs](http://www.foundationdb.com/documentation/beta1/api-node.html).\r\n\r\n## Documentation\r\n\r\n\r\n\r\n### Data Types\r\n\r\nThe library handles strings, integers, decimals, booleans, dates, arrays and objects.  In order to intelligently retrieve\r\nthe correct datatype back from the database, values saved into the database are encoded as a tuple with 2 values.  The first\r\nvalue is the datatype.  The second value is the \"real\" value.  As long as data is retrieved via the library, the data returned\r\nfrom any function will be properly translated into its appropriate javascript type.  If data is retrieved directly from the\r\ndatabase without going through the library, use the first unpacked tuple value to determine the type stored in the buffer:\r\n\r\n- string = 0\r\n- integer = 1\r\n- decimal = 2\r\n- boolean = 3\r\n- date = 4\r\n- arrays = 5\r\n- objects = 5\r\n- NULL = 6\r\n\r\nThe library only supports integers between the values of -9007199254740993 and 9007199254740991 because these\r\nare the limits of what javascript can handle with precision.  If you need to support values larger or smaller, turn to\r\none of the bigint/bigdecimal libraries and convert the values to strings before storing in the library.\r\n\r\nDecimals are stored as string buffers and then are converted to floats when extracted.\r\n\r\nArrays and objects are stored as JSON strings and are converted back to the original array/object via JSON parse when retrieved.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}